// <auto-generated />
using System;
using MApp.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MApp.DataAccess.Migrations
{
    [DbContext(typeof(MAppDbContext))]
    [Migration("20241003152237_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MApp.DataAccess.Models.EventsStatuses.EventStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTimeGMT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorID")
                        .HasColumnType("integer");

                    b.Property<int?>("OnlineEventID")
                        .HasColumnType("integer");

                    b.Property<int?>("PhysicalEventID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CreatorID");

                    b.HasIndex("OnlineEventID");

                    b.HasIndex("PhysicalEventID");

                    b.ToTable("EventsStatuses");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.EventsStatuses.EventStatusComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTimeGMT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorID")
                        .HasColumnType("integer");

                    b.Property<int>("StatusID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CreatorID");

                    b.HasIndex("StatusID");

                    b.ToTable("EventsStatusesComments");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorID")
                        .HasColumnType("integer");

                    b.Property<int>("DetailsID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EventDateGMT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EventForFriendsOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEventPrivate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsersListPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowAfterAllSpotsTaken")
                        .HasColumnType("boolean");

                    b.Property<int>("Spots")
                        .HasColumnType("integer");

                    b.Property<int>("SpotsLeft")
                        .HasColumnType("integer");

                    b.Property<string>("Subcategory")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DetailsID");

                    b.ToTable("OnlineEvents");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEventArchived", b =>
                {
                    b.Property<int>("onlineEventsArchivedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("onlineEventsArchivedID"));

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("contactDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("creatorID")
                        .HasColumnType("integer");

                    b.Property<string>("details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("eventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("eventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("eventTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("onlineEventsID")
                        .HasColumnType("integer");

                    b.Property<int>("spotsLeft")
                        .HasColumnType("integer");

                    b.Property<string>("subcategory")
                        .HasColumnType("text");

                    b.Property<string>("users")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("wayOfContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("onlineEventsArchivedID");

                    b.ToTable("OnlineEventsArchived");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEventAttendee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAttending")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("OnlineEventAttendees");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEventCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("OnlineEventCategories");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEventDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WayOfContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("OnlineEventsDetails");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEventInvitation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InvitationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvitedUserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("InvitedUserID");

                    b.ToTable("OnlineEventsInvitations");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorID")
                        .HasColumnType("integer");

                    b.Property<int>("DetailsID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EventDateGMT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EventForFriendsOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEventPrivate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsersListPublic")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longtitude")
                        .HasColumnType("double precision");

                    b.Property<bool>("ShowAfterAllSpotsTaken")
                        .HasColumnType("boolean");

                    b.Property<int>("Spots")
                        .HasColumnType("integer");

                    b.Property<int>("SpotsLeft")
                        .HasColumnType("integer");

                    b.Property<string>("Subcategory")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DetailsID");

                    b.ToTable("PhysicalEvents");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventArchived", b =>
                {
                    b.Property<int>("PhysicalEventsArchivedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhysicalEventsArchivedID"));

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("contactDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("creatorID")
                        .HasColumnType("integer");

                    b.Property<string>("details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("eventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("eventDateGMT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("eventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("eventTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("howToGetThereInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("longtitude")
                        .HasColumnType("double precision");

                    b.Property<int>("physicalEventsID")
                        .HasColumnType("integer");

                    b.Property<int>("spotsLeft")
                        .HasColumnType("integer");

                    b.Property<string>("subcategory")
                        .HasColumnType("text");

                    b.Property<string>("users")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("wayOfContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PhysicalEventsArchivedID");

                    b.ToTable("PhysicalEventsArchived");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventAttendee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAttending")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("PhysicalEventAttendees");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PhysicalEventCategories");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HowToGetThereInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WayOfContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PhysicalEventsDetails");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventInvitation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InvitationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvitedUserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("InvitedUserID");

                    b.ToTable("PhysicalEventsInvitations");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.Users.ContactInvitation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("InvitationAuthorID")
                        .HasColumnType("integer");

                    b.Property<int>("InvitedUserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("InvitedUserID");

                    b.ToTable("ContactInvitations");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.Users.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hobbies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("AllUsers");
                });

            modelBuilder.Entity("OnlineEventCategoryUser", b =>
                {
                    b.Property<int>("FavouriteForID")
                        .HasColumnType("integer");

                    b.Property<int>("FavouriteOnlineEventCategoriesID")
                        .HasColumnType("integer");

                    b.HasKey("FavouriteForID", "FavouriteOnlineEventCategoriesID");

                    b.HasIndex("FavouriteOnlineEventCategoriesID");

                    b.ToTable("OnlineEventCategoryUser");
                });

            modelBuilder.Entity("PhysicalEventCategoryUser", b =>
                {
                    b.Property<int>("FavouriteForID")
                        .HasColumnType("integer");

                    b.Property<int>("FavouritePhysicalEventCategoriesID")
                        .HasColumnType("integer");

                    b.HasKey("FavouriteForID", "FavouritePhysicalEventCategoriesID");

                    b.HasIndex("FavouritePhysicalEventCategoriesID");

                    b.ToTable("PhysicalEventCategoryUser");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("ContactsID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ContactsID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.EventsStatuses.EventStatus", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.OnlineEvents.OnlineEvent", "OnlineEvent")
                        .WithMany("Statuses")
                        .HasForeignKey("OnlineEventID");

                    b.HasOne("MApp.DataAccess.Models.PhysicalEvents.PhysicalEvent", "PhysicalEvent")
                        .WithMany("Statuses")
                        .HasForeignKey("PhysicalEventID");

                    b.Navigation("Creator");

                    b.Navigation("OnlineEvent");

                    b.Navigation("PhysicalEvent");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.EventsStatuses.EventStatusComment", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.EventsStatuses.EventStatus", "Status")
                        .WithMany("Comments")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEvent", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.OnlineEvents.OnlineEventCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.OnlineEvents.OnlineEventDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEventAttendee", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.OnlineEvents.OnlineEvent", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.Users.User", "User")
                        .WithMany("AttendedOnlineEvents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEventInvitation", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.OnlineEvents.OnlineEvent", "Event")
                        .WithMany("InvitedUsers")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.Users.User", "InvitedUser")
                        .WithMany("OnlineEventsInvitations")
                        .HasForeignKey("InvitedUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("InvitedUser");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEvent", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventAttendee", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.PhysicalEvents.PhysicalEvent", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.Users.User", "User")
                        .WithMany("AttendedPhysicalEvents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventInvitation", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.PhysicalEvents.PhysicalEvent", "Event")
                        .WithMany("InvitedUsers")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.Users.User", "InvitedUser")
                        .WithMany("PhysicalEventsInvitations")
                        .HasForeignKey("InvitedUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("InvitedUser");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.Users.ContactInvitation", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.Users.User", "InvitedUser")
                        .WithMany("Invitations")
                        .HasForeignKey("InvitedUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");
                });

            modelBuilder.Entity("OnlineEventCategoryUser", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("FavouriteForID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.OnlineEvents.OnlineEventCategory", null)
                        .WithMany()
                        .HasForeignKey("FavouriteOnlineEventCategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhysicalEventCategoryUser", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("FavouriteForID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.PhysicalEvents.PhysicalEventCategory", null)
                        .WithMany()
                        .HasForeignKey("FavouritePhysicalEventCategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("MApp.DataAccess.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ContactsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MApp.DataAccess.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MApp.DataAccess.Models.EventsStatuses.EventStatus", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.OnlineEvents.OnlineEvent", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("InvitedUsers");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.PhysicalEvents.PhysicalEvent", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("InvitedUsers");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("MApp.DataAccess.Models.Users.User", b =>
                {
                    b.Navigation("AttendedOnlineEvents");

                    b.Navigation("AttendedPhysicalEvents");

                    b.Navigation("Invitations");

                    b.Navigation("OnlineEventsInvitations");

                    b.Navigation("PhysicalEventsInvitations");
                });
#pragma warning restore 612, 618
        }
    }
}
